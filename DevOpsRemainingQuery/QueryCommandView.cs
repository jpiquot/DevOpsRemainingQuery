namespace DevOpsRemainingQuery
{
    using System;
    using System.Collections.Generic;
    using System.CommandLine.Rendering;
    using System.CommandLine.Rendering.Views;
    using System.Reflection;

    /// <summary>
    /// Database backup list view.
    /// </summary>
    internal class QueryCommandView : StackLayoutView
    {
        private readonly QueryCommandOptions options;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryCommandView"/> class.
        /// </summary>
        /// <param name="options">The options.</param>
        /// <exception cref="ArgumentNullException">options.</exception>
        /// <autogeneratedoc/>
        public QueryCommandView(QueryCommandOptions options)
        {
            this.options = options ?? throw new ArgumentNullException(nameof(options));
        }

        /// <summary>
        /// Gets the formatter.
        /// </summary>
        /// <value>The formatter.</value>
        /// <autogeneratedoc/>
        protected TextSpanFormatter Formatter { get; } = new TextSpanFormatter();

        /// <summary>
        /// Initializes this instance.
        /// </summary>
        /// <autogeneratedoc/>
        public virtual void Initialize()
        {
            string authentication;
            if (string.IsNullOrWhiteSpace(options.PersonalAccessToken))
            {
                authentication = "Windows";
            }
            else
            {
                authentication = "Personal access token";
            }

            Add(new ContentView("\n"));
            Add(new ContentView(Span($"DevOps Remaining Work Query V{Assembly.GetExecutingAssembly().GetName().Version}".Orange())));
            Add(new ContentView(Span($"Jérôme Piquot".DarkOrange())));
            Add(new ContentView("\n"));
            Add(new ContentView(Span($"Server:          {options.Server?.DarkGrey()}")));
            Add(new ContentView(Span($"Project:         {options.Project?.DarkGrey()}")));
            Add(new ContentView(Span($"Query:           {options.Query?.DarkGrey()}")));
            Add(new ContentView(Span($"Ouput file:      {options.OutputFile?.DarkGrey()}")));
            Add(new ContentView(Span($"Area path:       {options.AreaPath?.DarkGrey()}")));
            Add(new ContentView(Span($"Iteration path:  {options.IterationPath?.ToString().DarkGrey()}")));
            Add(new ContentView(Span($"Authentication:  {authentication.DarkGrey()}")));
            Add(new ContentView(Span($"Activity order:  {string.Join(',', options.ActivityOrder ?? new List<string>()).DarkGrey()}")));
            Add(new ContentView("\n"));
            Formatter.AddFormatter<DateTime>(d => $"{d:d} {ForegroundColorSpan.DarkGray()}{d:t}");
        }

        /// <summary>
        /// Spans the specified formattable string.
        /// </summary>
        /// <param name="formattableString">The formattable string.</param>
        /// <returns>TextSpan.</returns>
        /// <autogeneratedoc/>
        protected TextSpan Span(FormattableString formattableString) => Formatter.ParseToSpan(formattableString);

        /// <summary>
        /// Spans the specified object.
        /// </summary>
        /// <param name="obj">The object.</param>
        /// <returns>TextSpan.</returns>
        /// <autogeneratedoc/>
        protected TextSpan Span(object obj) => Formatter.Format(obj);
    }
}