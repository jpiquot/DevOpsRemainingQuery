namespace DevOpsRemainingQuery.DevOps
{
    using System;
    using System.Collections.Generic;

    /// <summary>
    /// Class QueryData.
    /// </summary>
    /// <autogeneratedoc/>
    internal class QueryData
    {
        private readonly List<string> fields;
        private readonly List<List<object?>> records;

        /// <summary>
        /// Initializes a new instance of the <see cref="QueryData"/> class.
        /// </summary>
        /// <param name="fields">The fields.</param>
        /// <param name="records">The records.</param>
        /// <exception cref="ArgumentException">
        /// The record {i} has an invalid number of fields ({record.Count}). Expected :
        /// {Fields.Count} - records.
        /// </exception>
        /// <autogeneratedoc/>
        public QueryData(List<string> fields, List<List<object?>> records)
        {
            this.fields = fields;
            this.records = records;
            int i = 0;
            foreach (var record in Records)
            {
                i++;
                if (record.Count != Fields.Count)
                {
                    throw new ArgumentException($"The record {i} has an invalid number of fields ({record.Count}). Expected : {Fields.Count}", nameof(records));
                }
            }
        }

        /// <summary>
        /// Gets the fields.
        /// </summary>
        /// <value>The fields.</value>
        /// <autogeneratedoc/>
        public List<string> Fields => fields;

        /// <summary>
        /// Gets the records.
        /// </summary>
        /// <value>The records.</value>
        /// <autogeneratedoc/>
        public List<List<object?>> Records => records;
    }
}