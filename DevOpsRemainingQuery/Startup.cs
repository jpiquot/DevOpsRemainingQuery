namespace DevOpsRemainingQuery
{
    using System;
    using System.CommandLine;
    using System.CommandLine.Builder;
    using System.CommandLine.Hosting;
    using System.CommandLine.Invocation;
    using System.CommandLine.IO;
    using System.CommandLine.Parsing;
    using System.CommandLine.Rendering;
    using System.IO;
    using System.Threading.Tasks;

    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;
    using Microsoft.Extensions.Logging;
    using Microsoft.Extensions.Options;

    using NLog.Extensions.Logging;
    using NLog.Web;

    /// <summary>
    /// Class Startup.
    /// </summary>
    /// <autogeneratedoc/>
    internal class Startup
    {
        private readonly string[] args;
        private readonly ConsoleRenderer consoleRenderer;
        private readonly InvocationContext invocationContext;
        private IConfiguration? configuration;
        private IServiceProvider? serviceProvider;

        /// <summary>
        /// Initializes a new instance of the <see cref="Startup"/> class.
        /// </summary>
        /// <param name="invocationContext">The invocation context.</param>
        /// <param name="args">The arguments.</param>
        /// <autogeneratedoc/>
        internal Startup(InvocationContext invocationContext, string[] args)
        {
            this.invocationContext = invocationContext;
            consoleRenderer = new ConsoleRenderer(
                        this.invocationContext.Console,
                        OutputMode.Ansi,
                        true);
            this.args = args ?? Array.Empty<string>();
        }

        /// <summary>
        /// Gets the configuration.
        /// </summary>
        /// <value>The configuration.</value>
        /// <autogeneratedoc/>
        private IConfiguration Configuration
            => configuration ??= Configure();

        /// <summary>
        /// Gets the service provider.
        /// </summary>
        /// <value>The service provider.</value>
        /// <autogeneratedoc/>
        private IServiceProvider ServiceProvider =>
            serviceProvider ??= ConfigureServices();

        /// <summary>
        /// Starts the asynchronous.
        /// </summary>
        /// <returns>System.Threading.Tasks.Task&lt;int&gt;.</returns>
        /// <autogeneratedoc/>
        internal Task<int> StartAsync()
        {
            if (invocationContext.Console is ITerminal terminal)
            {
                terminal.Clear();
            }

            return new CommandLineBuilder(
                new QueryCommand(
                        Options.Create(
                            GetSettings())))
                .UseDefaults()
                .UseHost(host => host
                    .ConfigureAppConfiguration((builder) => Configure(builder))
                    .ConfigureHostConfiguration((builder) => Configure(builder))
                    .ConfigureServices((services) => ConfigureServices(services))
                    .ConfigureLogging(logging =>
                    {
                        logging.ClearProviders();
                        logging.SetMinimumLevel(LogLevel.Trace);
                    })
                    .UseNLog())
                .Build()
                .InvokeAsync(args ?? Array.Empty<string>(), invocationContext.Console);
        }

        /// <summary>
        /// Configures this instance.
        /// </summary>
        /// <returns>Microsoft.Extensions.Configuration.IConfiguration.</returns>
        /// <autogeneratedoc/>
        private IConfiguration Configure()
            => Configure(new ConfigurationBuilder()).Build();

        /// <summary>
        /// Configures the specified builder.
        /// </summary>
        /// <param name="builder">The builder.</param>
        /// <returns>Microsoft.Extensions.Configuration.IConfigurationBuilder.</returns>
        /// <autogeneratedoc/>
        private IConfigurationBuilder Configure(IConfigurationBuilder builder)
        {
            builder
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: true)
                .AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")}.json", optional: true);
            if (Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT")?.ToUpperInvariant() != "PRODUCTION")
            {
                builder.AddUserSecrets<Program>();
            }

            builder
                .AddEnvironmentVariables()
                .AddEnvironmentVariables("ASPNETCORE_")
                .AddEnvironmentVariables("NETCORE_")
                .AddEnvironmentVariables("DOTNET_")
                .AddCommandLine(args);
            return builder;
        }

        /// <summary>
        /// Configures the services.
        /// </summary>
        /// <param name="services">The services.</param>
        /// <returns>Microsoft.Extensions.DependencyInjection.IServiceCollection.</returns>
        /// <autogeneratedoc/>
        private IServiceCollection ConfigureServices(IServiceCollection services)
            => services
                .AddOptions()
                .AddSingleton<IConsole, SystemConsole>()
                .AddSingleton(invocationContext)
                .AddSingleton(p => new ConsoleRenderer(
                        invocationContext.Console,
                        OutputMode.Ansi,
                        true))
                .AddLogging(loggingBuilder =>
                {
                    loggingBuilder.AddNLog();
                })
                .AddTransient<QueryCommandHandler>()
                .Configure<QuerySettings>(Configuration.GetSection(nameof(QuerySettings)));

        /// <summary>
        /// Configures the services.
        /// </summary>
        /// <returns>System.IServiceProvider.</returns>
        /// <autogeneratedoc/>
        private IServiceProvider ConfigureServices()
            => ConfigureServices(new ServiceCollection())
                .BuildServiceProvider();

        /// <summary>
        /// Gets the settings.
        /// </summary>
        /// <returns>DevOpsRemainingQuery.QuerySettings.</returns>
        /// <autogeneratedoc/>
        private QuerySettings GetSettings()
        {
            var settings = new QuerySettings();
            Configuration.Bind(nameof(QuerySettings), settings);
            return settings;
        }
    }
}